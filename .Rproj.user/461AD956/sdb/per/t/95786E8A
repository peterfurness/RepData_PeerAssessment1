{
    "contents" : "# Peer Assessment 1\n\nThis assignment makes use of data from a personal activity monitoring device. This device collects data at 5 minute intervals through the day. The data consists of two months of data from an anonymous individual collected during the months of October and November, 2012 and includes the number of steps taken in 5 minute intervals each day.\n\n## Step 1 - Import the data\nUnzip the zipped datafile and then use read.csv() to import the data into a dataframe.\n\n```{r import data}\nzipfile<-\"activity.zip\"\nfile1<-\"activity.csv\"\nunzip(zipfile, file1 ); \n## Read the file into a data frame\nactivity<-read.csv(file1)\n```\n\n## Step 2 - What is the mean total number of steps taken per day\nIn this step we calculate the total number of steps taken per day. A histogram is then produced of the total number of steps taken each day. Finally we calculate and report the mean and median of the total number of steps taken each day. For this and the next step we ignore the missing values in the dataset.\n\n```{r steps taken per day}\n## Create summary of total steps per day\nif (!require(doBy)) {\n    install.packages(\"doBy\")\n  library(doBy)\n    require(doBy) }\n activitybyday<-summaryBy(steps ~ date, data = activity, FUN = sum)\n ## Noting that we cant use na.rm=TRUE in summaryBy as it will treat missing values \n ## as zero\n\n## Create histogram of total steps per day\n hist(activitybyday$steps, col=\"red\", \n      main=\"histogram of number of steps per day\\n (ignoring missing values)\",\n     xlab=\"steps\")\n\n## Compute mean and median of steps per day\n mean<-mean(activitybyday$steps, na.rm=TRUE)\n median<-median(activitybyday$steps, na.rm=TRUE)\n cbind(mean, median)\n```\n\n## Step 3 - What is the average daily activity pattern?\nIn this step we begin by making a time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all the days (y-axis).  Next we compute which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps.  As for Step 2 we ignore missing values in the dataset.\n\n```{r average daily activity pattern}\n## Create summary of mean steps by 5-minute interval\n## Note that the default function (FUN) in summaryBy is mean\n## Although we are ignoring missing values we now have to use na.rm=TRUE\n## in summaryBy because, when taking means, any missing value will cause\n## the mean to have a missing value\nactivitybyinterval<-summaryBy(steps ~ interval, data = activity, na.rm=TRUE)\nplot(activitybyinterval$interval, activitybyinterval$steps, type=\"l\",\n     main=\"average number of steps taken by 5-minute interval\",\n     xlab=\"interval\", ylab=\"average number of steps\")\n\n## Find the interval with the maximum number of steps\nmaxint<-max(activitybyinterval$steps.mean)\nactivitybyinterval[activitybyinterval$steps==maxint,]\n```\n\n## Step 4 - Imputing missing values\nIn this step we examine the missing values in the activity dataframe. First we check the number of missing values for all the fields. This shows that only the steps field has missing values. We then interpolate for these missing values using the corresponding mean value of steps for that interval using the dataframe created in Step3.  \n\nWe then repeat the histogram and calculations of mean and median for this interpolated dataframe.\n\n```{r imputing missing values}\n## Missing values\n## Note that we must check all the fields\nmissingsteps<-sum(is.na(activity$steps))\nmissingdate<-sum(is.na(activity$date))\nmissinginterval<-sum(is.na(activity$interval))\nt1<-as.data.frame(missingsteps)\nt2<-as.data.frame(missingdate)\nt3<-as.data.frame(missinginterval )\ncbind(t1,t2,t3)\n\n## Impute missing values for steps\n## We will do this using the mean value for the interval as\n## calculated in Step 3\nnrecords<-nrow(activity)\nactivityfill<-activity\nfor (i in 1:nrecords) {\n  ## determine the value of the steps interpolant\n  interval1<-activity$interval[i]\n  stepsfill<-activitybyinterval$steps.mean[activitybyinterval$interval==interval1]\n  if (is.na(activity$steps[i])) {activityfill$steps[i]<-stepsfill}\n}\n\n## Create summary of total steps per day for filled-in dataframe\nactivityfillbyday<-summaryBy(steps ~ date, data = activityfill, FUN = sum)\n## Create histogram of total steps per day\nhist(activityfillbyday$steps, col=\"red\", \n     main=\"histogram of number of steps per day\\n (with interpolated values where missing)\",\n     xlab=\"steps\")\n\n## Compute mean and median of steps per day in the filled-in dataframe\nmean<-mean(activityfillbyday$steps, na.rm=TRUE)\nmedian<-median(activityfillbyday$steps, na.rm=TRUE)\ncbind(mean, median)\n\n```\nThis shows that the mean remains unchanged but the median increases a little as a result of interpolating missing values using the interval means.  It is interesting that the mean is now equal to the median.\n\n## Step 5 - Are there differences in activity patterns between weekdays and weekends?\nIn this step we use the date variable to split the analysis between weekdays and weekends.  A panel plot is presented of the time series of mean steps (taken across all the days for each interval) against interval. This shows clearly that weekend step rates are spread more evenly thoughout the day, wherease weekday step rates have a higher peak in the early part of the day.\n\n```{r weekday and weekend patterns}\n## Activity patterns - weekdays compared with weekends\nactivityfill$date1<-weekdays(as.Date(activityfill$date))\nnrecords<-nrow(activityfill)\nfor (i in 1:nrecords) {\n  ## determine the value of the steps interpolant\n  if (activityfill$date1[i] %in% c(\"Saturday\",\"Sunday\")) {\n    activityfill$daytype[i]<-\"Weekend\"}\n  else {activityfill$daytype[i]<-\"Weekday\"}\n}\nactivityfill$daytype<-as.factor(activityfill$daytype)\n\n## Create panel plot using Lattice plotting system\n## First aggregate by interval and daytype\nactivityfillbyinterval<-summaryBy(steps ~ interval+daytype, data = activityfill, na.rm=TRUE)\n\nlibrary(lattice)\nxyplot(steps.mean~interval| daytype, data= activityfillbyinterval, type=\"l\", layout=c(1,2))\n\n```\n",
    "created" : 1439465104732.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "823316418",
    "id" : "95786E8A",
    "lastKnownWriteTime" : 1439465122,
    "path" : "~/Client/Coursera/C004 - Reproducible Research/RepData_PeerAssessment1/PA1_template.Rmd",
    "project_path" : "PA1_template.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_markdown"
}